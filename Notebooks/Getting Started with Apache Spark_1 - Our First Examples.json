{"paragraphs":[{"text":"val inspections = sc.textFile(\"hdfs:///user/kevin/Inspections/food-health-inspection-data.csv\")","user":"admin","dateUpdated":"2018-11-04T11:36:20-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539655750138_1858396073","id":"20181015-220910_816502256","dateCreated":"2018-10-15T22:09:10-0400","dateStarted":"2018-11-04T11:36:20-0500","dateFinished":"2018-11-04T11:36:20-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6364"},{"text":"%md\nOur data set includes a *lot* of columns and is semi-colon delimited.  Let's start by looking at a few records to see how everything looks.","user":"admin","dateUpdated":"2018-10-17T21:43:43-0400","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539827012323_-553161488","id":"20181017-214332_79472587","dateCreated":"2018-10-17T21:43:32-0400","dateStarted":"2018-10-17T21:43:43-0400","dateFinished":"2018-10-17T21:43:44-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6365"},{"text":"//Our data set includes a *lot* of columns and is semi-colon delimited.  Let's start by looking at a few records to see how everything looks.\nval miniInspections = inspections.take(5)\n","user":"admin","dateUpdated":"2018-11-04T11:36:31-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539655843750_654840217","id":"20181015-221043_896695127","dateCreated":"2018-10-15T22:10:43-0400","dateStarted":"2018-11-04T11:36:31-0500","dateFinished":"2018-11-04T11:36:31-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6366"},{"text":"/*\nWe want to do the following:\n1)  Take the 13th, 17th, and 37th columns in the delimited list.  These are inspection date, score, and report type, respectively.\n2)  Filter out any non-date inspection dates or any inspection dates earlier than the year 2000.  Some invalid inspection dates include N/A, NO, and the year 0.\n3)  Ignore any report types which are neither Food Service nor Mobile Food.  The same inspection agency also covers daycares, schools, and other institutions.\n\nTo get our logic right, first, we'll try it on the miniInspections list.\n*/\n\nminiInspections.filter(dt => dt.split(\";\")(12).length == 10 && dt.split(\";\")(12).substring(0,4).toInt >= 2000 && (dt.split(\";\")(36) == \"Food Service\" || dt.split(\";\"(36)) == \"Mobile Food\"))\n","user":"admin","dateUpdated":"2018-11-04T11:38:14-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539655920844_1036785317","id":"20181015-221200_1196352308","dateCreated":"2018-10-15T22:12:00-0400","dateStarted":"2018-11-04T11:38:14-0500","dateFinished":"2018-11-04T11:38:14-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6367"},{"text":"//As we build out more and more rules, the filter function will get tougher to understand.  So let's create some functions that we can use to simplify matters.\ndef IsValidLine(line:String) = { line.split(\";\").length > 37 }\ndef IsValidDate(date:String) = { date.length == 10 && date.substring(0,4).toInt >= 2000 }\ndef IsValidInspectionType(inspectionType:String) = { inspectionType == \"Food Service\" || inspectionType == \"Mobile Food\" }\ndef HasRating(rating:String) = { rating.length > 0 }","user":"admin","dateUpdated":"2018-11-04T11:39:12-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539656094121_1531650668","id":"20181015-221454_189668742","dateCreated":"2018-10-15T22:14:54-0400","dateStarted":"2018-11-04T11:39:12-0500","dateFinished":"2018-11-04T11:39:13-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6368"},{"text":"//Now we can redefine miniInspections with these functions and map our input set to our desired output array:  an array of date, year, score, and report type.\nval miniInspectionSet = miniInspections.filter(dt => IsValidDate(dt.split(\";\")(12)) && IsValidInspectionType(dt.split(\";\")(36))).\n                                        map(x => (x.split(\";\")(12), x.split(\";\")(12).substring(0,4).toInt, x.split(\";\")(16).toInt, x.split(\";\")(36)))\n","user":"admin","dateUpdated":"2018-11-04T11:39:53-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539656232362_528392458","id":"20181015-221712_1113639858","dateCreated":"2018-10-15T22:17:12-0400","dateStarted":"2018-11-04T11:39:53-0500","dateFinished":"2018-11-04T11:39:53-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6369"},{"text":"//Once we have the specifics down and working with our mini inspection set, let's do it for real with the full data set:\r\nval inspectionSet = inspections.filter(x => IsValidLine(x) && IsValidDate(x.split(\";\")(12)) && IsValidInspectionType(x.split(\";\")(36)) && HasRating(x.split(\";\")(16))).\r\n                                map(x => (x.split(\";\")(12), x.split(\";\")(12).substring(0,4).toInt, x.split(\";\")(16).toFloat, x.split(\";\")(36)))","user":"admin","dateUpdated":"2018-11-04T11:40:20-0500","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":112.889,"optionOpen":false}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539656251715_430681561","id":"20181015-221731_506303974","dateCreated":"2018-10-15T22:17:31-0400","dateStarted":"2018-11-04T11:40:20-0500","dateFinished":"2018-11-04T11:40:20-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6370"},{"text":"//Exercise 1:  What is the average score for inspections from the year 2000 onward?\r\nval scores2000 = inspectionSet.filter(x => x._2 >= 2000).\r\n                               map(x => (x._3, 1.0)).\r\n                               reduce((x, y) => (x._1 + y._1, x._2 + y._2))\r\nval mean2000 = scores2000._1 / scores2000._2\r\nprintln(f\"The mean score for inspections from the year 2000 onwards is:  $mean2000%3.2f\")","user":"admin","dateUpdated":"2018-11-04T11:43:10-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539656334557_609729362","id":"20181015-221854_1192194149","dateCreated":"2018-10-15T22:18:54-0400","dateStarted":"2018-11-04T11:43:10-0500","dateFinished":"2018-11-04T11:43:11-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6371"},{"text":"//Exercise 2:  What is the average score by year for inspections from 2000 onward?\r\nval scoresByYear = inspectionSet.filter(x => x._2 >= 2000).\r\n                                 map(x => (x._2, x._3)).\r\n                                 aggregateByKey((0.0,0.0))((acc, value) => (acc._1 + value, acc._2 + 1),(acc1, acc2) => (acc1._1 + acc2._1, acc1._2 + acc2._2))\r\nval sumByYear = scoresByYear.mapValues(x => (x._1/x._2)).\r\n                             sortByKey().\r\n                             collect()\r\nprintln(\"Average score by year:\")\r\nsumByYear.foreach(println(_))","user":"admin","dateUpdated":"2018-11-04T11:45:36-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539656347050_1427351423","id":"20181015-221907_540505555","dateCreated":"2018-10-15T22:19:07-0400","dateStarted":"2018-11-04T11:45:36-0500","dateFinished":"2018-11-04T11:45:37-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6372"},{"text":"//Exercise 3:  How many inspections do we have total? -- we know that because we calculated this to get the answer to the first question.\r\nscores2000._2","user":"admin","dateUpdated":"2018-11-04T11:45:53-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539656359241_-211294143","id":"20181015-221919_1304932935","dateCreated":"2018-10-15T22:19:19-0400","dateStarted":"2018-11-04T11:45:53-0500","dateFinished":"2018-11-04T11:45:53-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6373"},{"text":"//Exercise 4:  How many inspections by year for inspections from 2000 onward?\r\nval inspectionsByYear = inspectionSet.filter(x => x._2 >= 2000).\r\n                                      map(x => (x._2, 1)).\r\n                                      reduceByKey((acc, value) => (acc + value))\r\nprintln(\"Total number of inspections by year:\")\r\ninspectionsByYear.sortByKey().\r\n                  collect().\r\n                  foreach(println(_))","user":"admin","dateUpdated":"2018-11-04T11:46:09-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539656419960_-2105169436","id":"20181015-222019_241530548","dateCreated":"2018-10-15T22:20:19-0400","dateStarted":"2018-11-04T11:46:09-0500","dateFinished":"2018-11-04T11:46:10-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6374"},{"text":"//Exercise 5:  How many inspections by report area do we have from 2000 onward?\r\nval inspectionsByReportArea = inspectionSet.filter(x => x._2 >= 2000).\r\n                                            map(x => (x._4, 1)).\r\n                                            reduceByKey((acc, value) => (acc + value))\r\ninspectionsByReportArea.sortByKey().\r\n                        collect().\r\n                        foreach(println(_))","user":"admin","dateUpdated":"2018-11-04T11:47:19-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539656440235_2120558383","id":"20181015-222040_279551599","dateCreated":"2018-10-15T22:20:40-0400","dateStarted":"2018-11-04T11:47:19-0500","dateFinished":"2018-11-04T11:47:20-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6375"},{"text":"//Exercise 6:  What is the average inspection score for Mobile Food versus Food Service from 2008 onward?\r\nval foodService2008 = inspectionSet.filter(x => x._2 >= 2008 && x._4 == \"Food Service\").\r\n                                    map(x => (x._3, 1.0)).\r\n                                    reduce((x, y) => (x._1 + y._1, x._2 + y._2))\r\nval meanfs2008 = foodService2008._1 / foodService2008._2\r\nval mobileFood2008 = inspectionSet.filter(x => x._2 >= 2008 && x._4 == \"Mobile Food\").\r\n                                   map(x => (x._3, 1.0)).\r\n                                   reduce((x, y) => (x._1 + y._1, x._2 + y._2))\r\nval meanmf2008 = mobileFood2008._1 / mobileFood2008._2\r\nprintln(f\"The mean score for Food Service inspections from the year 2008 onwards is $meanfs2008%3.2f and for Mobile Food inspections is $meanmf2008%3.2f.\")\r\n","user":"admin","dateUpdated":"2018-11-04T11:47:34-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539656467372_-1274603830","id":"20181015-222107_1213908356","dateCreated":"2018-10-15T22:21:07-0400","dateStarted":"2018-11-04T11:47:34-0500","dateFinished":"2018-11-04T11:47:36-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6376"},{"user":"admin","dateUpdated":"2018-10-15T22:25:46-0400","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539656484165_755746765","id":"20181015-222124_635358550","dateCreated":"2018-10-15T22:21:24-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:6377"}],"name":"Getting Started with Apache Spark/1 - Our First Examples","id":"2DVQQ1YAX","angularObjects":{"2CHS8UYQQ:shared_process":[],"2CKX6DGQZ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKX8WPU1:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}